package pl.dzielins42.stackoverflow.view;

import android.util.Log;

import com.hannesdorfmann.mosby3.mvi.MviBasePresenter;

import javax.inject.Inject;
import javax.inject.Singleton;

import io.reactivex.Observable;

/**
 * Connects presentation layer and business logic layer by routing {@link MainIntent} instances
 * (intents) generated by {@link MainView} (view) to proper interactors, and returning new
 * {@link MainModel} instances to be rendered by view.
 */
@Singleton
public class MainPresenter extends MviBasePresenter<MainView, MainModel> {

    private static final String TAG = MainPresenter.class.getSimpleName();

    @Inject
    public MainPresenter() {
        super();
    }

    @Override
    protected void bindIntents() {
        subscribeViewState(
                intent(view -> view.intents().toObservable())
                        .doOnNext(event -> Log.d(TAG, String.valueOf(event)))
                        .publish(event -> process(event))
                        .doOnError(throwable -> Log.e(TAG, "Error: ", throwable))
                        .scan(initialModel(), (model, patch) -> patch.apply(model))
                        // Skip initial model
                        .skip(1),
                MainView::render
        );
    }

    private MainModel initialModel() {
        return MainModel.builder().counter(0).build();
    }

    private Observable<MainPatch> process(Observable<MainIntent> shared) {
        return shared
                .ofType(MainIntent.DummyIntent.class)
                .map(
                        intent -> MainPatch.DummyPatch.builder()
                                .counter(intent.getCounter())
                                .build()
                );
    }
}
